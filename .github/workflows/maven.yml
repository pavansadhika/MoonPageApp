name: GITHUB-CICD
on: [push]
env:
   DOCKER_IMAGE_NAME: pavan9999/github-actions
   DOCKER_IMAGE_TAG: MoonPageApp
   AWS_REGION: us-east-1
   ECS_CLUSTER: ecs-cluster
   ECS_SERVICE: svc
   ECS_TASK_DEFINITION: taskdefinition
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: adopt
          cache: maven
      - name: Maven Build 
        run: mvn clean package
      # Generate artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: MoonPageApp
          path: ./target/*.war
  # SonarQube Code Scan & Analysis and CodeQuality 
  SonarQube_Scanner:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: SonarQube-Scan Stage
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # SOnarQube Code Quality 
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  # OWASP Dependency Check(SCA) 
  OWASPDependencyCheck:
    needs: SonarQube_Scanner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run dependency check
        run: mvn org.owasp:dependency-check-maven:check
      
      # Upload Dependency check report
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: ./target/dependency-check-report.html
  # Junit Testing reports
  Junit_Test:
    needs: OWASPDependencyCheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: adopt
          cache: maven
      - name: Build and Test
        run: mvn test
      - name: Upload JUnit Test Results
        uses: actions/upload-artifact@v2
        with:
         name: junit-reports
         path: ./target/*
  # CodeCoverage for Generate Jacoco reports
  CodeCoverage:
    needs: Junit_Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: adopt
          cache: maven
      - name: Generate JaCoCo report
        run: mvn clean test jacoco:report
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v2
        with:
         name: codecoverage-jacoco-report
         path: ./target/site/jacoco/index.html 
  # Build before creating docker image
  Build_Scan_Docker_Image:
    needs: CodeCoverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: adopt
          cache: maven
      - name: Build before create image
        run: mvn clean package
      # Build Docker image and Push into Docker Hub 
      - name: Docker-Image-Build 
        run: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .
        # Docker Image Scan Trivy Tool installing
      - name: Install Trivy 
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin
      # Docker Image Scanning
      - name: Scan Docker Image
        run: |
           trivy image ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} > image-scan-report.html
           trivy --no-progress --exit-code 0 --severity HIGH,CRITICAL --auto-refresh ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
      - name: Upload scan results
        uses: actions/upload-artifact@v2
        with:
           name: trivy-scan-results
           path: ./*.html  
  # Docker Image Push Into Docker Registry
  Docker_Image_Push: 
     needs: Build_Scan_Docker_Image
     runs-on: ubuntu:latest
     steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: adopt
          cache: maven
      - name: Build before create image
        run: mvn clean package
      # Build Docker image and Push into Docker Hub 
      - name: Docker Image Push Into Docker Hub
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: ${DOCKER_IMAGE_NAME}
          tags: ${DOCKER_IMAGE_TAG}
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  # Deploy Image into Selfhosted 
  Deploy_QA_Environment:
    needs: Docker_Image_Push
    runs-on: self-hosted
    steps:
     - uses: actions/checkout@v2
     - name: Set up JDK 11
     - uses: actions/setup-java@v1
       with:
          java-version: "11"
          distribution: adopt
          cache: maven
     - name: Maven Build 
       run: mvn clean package     
     - name: Pull Docker image
       run: |
           sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
           sudo docker pull ${Docker_IMAGE_NAME}:${Docker_IMAGE_TAG}

     - name: Start Docker container
       run: |
            sudo docker run -d --name MoonPageApp -p 8080:8080 ${Docker_IMAGE_NAME}:${Docker_IMAGE_TAG}

     - name: Wait for application to start
       run: sleep 30

     - name: Verify application is running
       run: |
         response=$(curl --write-out %{http_code} --silent --output /dev/null http://44.204.226.84:8080/)
         if [ $response -ne 200 ]; then
           echo "Application failed to start"
           exit 1
         fi
  # Selenium Testing for Generate TestNG Reports
  Selenium-test:
    needs: Deploy_QA_Environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name:  Install Google Chrome # Using shell script to install Google Chrome
        run: |
           chmod +x ./scripts/InstallChrome.sh
           ./scripts/InstallChrome.sh 
      - name: Build with Maven
        run: mvn test --file selenium-pom.xml
      - name: upload all test files
        uses: actions/upload-artifact@v2
        with:
         name: selenium-results
         path: ./*            
  #Deployment in Staging Environment ECS CLuster
  Deploy_Staging_Environment:
    needs: Selenium-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Deploy to Amazon ECS
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{env.ECS_SERVICE}} --task-definition ${{ env.ECS_TASK_DEFINITION }}
      
  # Jmeter Testing for load and performance 
  Performance_Testing:
    #needs: Deploy_Staging_Environment 
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v2
     - name: Setup Java
       uses: actions/setup-java@v1
       with:
          java-version: 11
          distribution: adopt
          cache: maven
     - name: Performance Testing
       run: mvn verify --from jmeter-pom.xml
     - name: Upload test results    
       uses: actions/upload-artifact@v2
       with:
          name: jmeter-test-results
          path: ./*     
        
        
