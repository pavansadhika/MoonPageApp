name: GITHUB-CICD
on: [push]
env:
   ARTIFACTORY_URL: http://10.53.105.21:8082/
   ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
   ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
   IMAGE_NAME: pavan9999/github-actions
   IMAGE_TAG: MoonPageApp
   AWS_REGION: us-east-1
   ECS_CLUSTER: ecs-cluster
   ECS_SERVICE: svc
   ECS_TASK_DEFINITION: taskdefinition
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: adopt
          cache: maven
      - name: Maven Build 
        run: mvn clean package
      # Generate artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: MoonPageApp
          path: ./target/*.war
  SonarQube:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      # SOnarQube Code Scan and analysis
      - uses: actions/checkout@v2
      - name: SonarQube-Scan Stage
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # SOnarQube Code Quality 
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  OWASPDependencyCheck:
    needs: SonarQube
    runs-on: ubuntu-latest
    steps:
      # OWASP Dependency Check(SCA)
      - uses: actions/checkout@v2
      - name: Run dependency check
        run: mvn org.owasp:dependency-check-maven:check
      
      # Upload Dependency check report
      - name: Upload results
        uses: actions/upload-artifact@v2
        with:
          name: dependency-check-report
          path: ./target/dependency-check-report.html
  Junit_Test:
    needs: OWASPDependencyCheck
    runs-on: ubuntu-latest
    steps:
      # Junit Testing
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: adopt
          cache: maven
      - name: Build and Test
        run: mvn test
      - name: Upload JUnit Test Results
        uses: actions/upload-artifact@v2
        with:
         name: junit-reports
         path: ./target/surefire-reports/*
  CodeCoverage:
    needs: Junit_Test
    runs-on: ubuntu-latest
    steps:
      # Code Coverage
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: adopt
          cache: maven
      - name: Generate JaCoCo report
        run: mvn clean test jacoco:report
      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v2
        with:
         name: codecoverage-jacoco-report
         path: ./target/site/jacoco/index.html 
  Docker-Image:
    needs: CodeCoverage
    runs-on: ubuntu-latest
    steps:
      # Build before creating docker image
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
          distribution: adopt
          cache: maven
      - name: Build before create image
        run: mvn clean package
      # Build Docker image and Push into Docker Hub 
      - name: Docker-Image-Build & Push
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: ${IMAGE_NAME}
          tags: ${IMAGE_TAG}
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


  Deploy_QA_Environment:
    #needs: Build
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
          java-version: "11"
          distribution: adopt
          cache: maven
    #- name: Checkout code
     # uses: actions/checkout@v2
    #- name: Install Java and Maven
    # run: |
         #sudo apt install openjdk-11-jdk
         #sudo apt install maven 
    - name: Maven Build 
      run: sudo mvn clean package   
    - name: Install Docker
      run: |
           sudo apt-get update
           sudo apt-get -y install docker.io    
    - name: Pull Docker image
      run: |
           sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
           sudo docker pull ${IMAGE_NAME}:${IMAGE_TAG}

    - name: Start Docker container
      run: |
           sudo docker run -d --name MoonPageApp -p 8080:8080 ${IMAGE_NAME}:${IMAGE_TAG}

    - name: Wait for application to start
      run: sleep 30

    - name: Verify application is running
      run: |
        response=$(curl --write-out %{http_code} --silent --output /dev/null http://44.200.128.81:8080/)
        if [ $response -ne 200 ]; then
          echo "Application failed to start"
          exit 1
        fi

  
  Selenium-test:
    # needs: build
     runs-on: ubuntu-latest
     steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name:  Install Google Chrome # Using shell script to install Google Chrome
        run: |
           chmod +x ./scripts/InstallChrome.sh
           ./scripts/InstallChrome.sh 
      - name: Build with Maven
        run: mvn test --file selenium-pom.xml
      - name: upload all test files
        uses: actions/upload-artifact@v2
        with:
         name: selenium-results
         path: ./*
#Deployment in Staging Environment
  Deploy_Staging_Environment:
    #needs: Selenium-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Deploy to Amazon ECS
      run: |
        aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{env.ECS_SERVICE}} --task-definition ${{ env.ECS_TASK_DEFINITION }}
  #Jmeter Testing for load and performance 
  Performance_Testing:
    #needs: Deploy_Staging_Environment 
    runs-on: ubuntu-latest
    steps:
     - name: Checkout code
       uses: actions/checkout@v2
     - name: Setup Java
       uses: actions/setup-java@v1
       with:
          java-version: 11
     - name: Download and extract JMeter
       run: |
         curl -L https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.5.zip -o jmeter.zip
         unzip jmeter.zip
     - name: Run JMeter test
       run: |
         ./apache-jmeter-5.5/bin/jmeter -n -t test.jmx -l result.jtl
     - name: Upload test results    
       uses: actions/upload-artifact@v2
       with:
          name: jmeter-test-results
          path: ./target/*.jtl
               
        
        
        
        
        
  
